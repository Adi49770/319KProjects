


ARM Macro Assembler    Page 1 


    1 00000000         ;****************** main.s ***************
    2 00000000         ; Program written by: ***Aditya Tyagi and Jerry Yang***
    3 00000000         ; Date Created: 2/4/2017
    4 00000000         ; Last Modified: 2/4/2017
    5 00000000         ; Brief description of the program
    6 00000000         ;   The LED toggles at 8 Hz and a varying duty-cycle
    7 00000000         ; Hardware connections (External: One button and one LED
                       )
    8 00000000         ;  PE1 is Button input  (1 means pressed, 0 means not pr
                       essed) making it a postive logic
    9 00000000         ;  PE0 is LED output (1 activates external9 LED on proto
                       board)
   10 00000000         ;  PF4 is builtin button SW1 on Launchpad (Internal) 
   11 00000000         ;        Negative Logic (0 means pressed, 1 means not pr
                       essed)
   12 00000000         ; Overall functionality of this system is to operate lik
                       e this
   13 00000000         ;   1) Make PE0 an output and make PE1 and PF4 inputs.
   14 00000000         ;   2) The system starts with the the LED toggling at 8H
                       z,
   15 00000000         ;      which is 8 times per second with a duty-cycle of 
                       20%.
   16 00000000         ;      Therefore, the LED is ON for (0.2*1/8)th of a sec
                       ond
   17 00000000         ;      and OFF for (0.8*1/8)th of a second.
   18 00000000         ;   3) When the button on (PE1) is pressed-and-released 
                       increase
   19 00000000         ;      the duty cycle by 20% (modulo 100%). Therefore fo
                       r each
   20 00000000         ;      press-and-release the duty cycle changes from 20%
                        to 40% to 60%
   21 00000000         ;      to 80% to 100%(ON) to 0%(Off) to 20% to 40% so on
                       
   22 00000000         ;   4) Implement a "breathing LED" when SW1 (PF4) on the
                        Launchpad is pressed:
   23 00000000         ;      a) Be creative and play around with what "breathi
                       ng" means.
   24 00000000         ;         An example of "breathing" is most computers po
                       wer LED in sleep mode
   25 00000000         ;         (e.g., https://www.youtube.com/watch?v=ZT6siXy
                       IjvQ).
   26 00000000         ;      b) When (PF4) is released while in breathing mode
                       , resume blinking at 8Hz.
   27 00000000         ;         The duty cycle can either match the most recen
                       t duty-
   28 00000000         ;         cycle or reset to 20%.
   29 00000000         ;      TIP: debugging the breathing LED algorithm and fe
                       el on the simulator is impossible.
   30 00000000         ; PortE device registers
   31 00000000 400243FC 
                       GPIO_PORTE_DATA_R
                               EQU              0x400243FC
   32 00000000 40024400 
                       GPIO_PORTE_DIR_R
                               EQU              0x40024400
   33 00000000 40024420 
                       GPIO_PORTE_AFSEL_R
                               EQU              0x40024420
   34 00000000 4002451C 



ARM Macro Assembler    Page 2 


                       GPIO_PORTE_DEN_R
                               EQU              0x4002451C
   35 00000000         ; PortF device registers
   36 00000000 400253FC 
                       GPIO_PORTF_DATA_R
                               EQU              0x400253FC
   37 00000000 40025400 
                       GPIO_PORTF_DIR_R
                               EQU              0x40025400
   38 00000000 40025420 
                       GPIO_PORTF_AFSEL_R
                               EQU              0x40025420
   39 00000000 40025510 
                       GPIO_PORTF_PUR_R
                               EQU              0x40025510
   40 00000000 4002551C 
                       GPIO_PORTF_DEN_R
                               EQU              0x4002551C
   41 00000000         
   42 00000000 400FE608 
                       SYSCTL_RCGCGPIO_R
                               EQU              0x400FE608
   43 00000000                 IMPORT           TExaS_Init
   44 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   45 00000000                 THUMB
   46 00000000                 EXPORT           Start
   47 00000000         
   48 00000000         Start
   49 00000000         
   50 00000000         ; TExaS_Init sets bus clock at 80 MHz
   51 00000000 F7FF FFFE       BL               TExaS_Init  ; voltmeter, scope 
                                                            on PD3
   52 00000004 B662            CPSIE            I           ; TExaS voltmeter, 
                                                            scope runs on inter
                                                            rupts
   53 00000006         ;Initialize the clock and other port
   54 00000006         
   55 00000006         ;NOP
   56 00000006 4838            LDR              R0, =SYSCTL_RCGCGPIO_R
   57 00000008 6801            LDR              R1, [R0]
   58 0000000A F041 0130       ORR              R1, #0x30
   59 0000000E 6001            STR              R1, [R0]
   60 00000010 BF00            NOP
   61 00000012 BF00            NOP
   62 00000014         ;2 bus cycles
   63 00000014         ; AFSEL
   64 00000014 4835            LDR              R0,=GPIO_PORTE_AFSEL_R
   65 00000016 F001 0100       AND              R1, #0
   66 0000001A 6001            STR              R1, [R0]    ;check this one 
   67 0000001C 4834            LDR              R0, =GPIO_PORTF_AFSEL_R
   68 0000001E 6001            STR              R1, [R0]
   69 00000020         ;set DEN
   70 00000020 4834            LDR              R0, =GPIO_PORTE_DEN_R
   71 00000022 6801            LDR              R1, [R0]
   72 00000024 F041 011F       ORR              R1, #0x1F
   73 00000028 6001            STR              R1, [R0]
   74 0000002A 4833            LDR              R0, =GPIO_PORTF_DEN_R
   75 0000002C 6801            LDR              R1, [R0]



ARM Macro Assembler    Page 3 


   76 0000002E F041 011F       ORR              R1, #0x1F
   77 00000032 6001            STR              R1, [R0]
   78 00000034         ;Unlock PUR
   79 00000034 4831            LDR              R0, =GPIO_PORTF_PUR_R
   80 00000036 F04F 0111       MOV              R1, #0x11
   81 0000003A 6001            STR              R1, [R0]
   82 0000003C         ; set directon
   83 0000003C 4830            LDR              R0, =GPIO_PORTE_DIR_R
   84 0000003E 6801            LDR              R1, [R0]
   85 00000040 F041 0101       ORR              R1, #0x01   ;PE0 is the ourput,
                                                             the rest are o and
                                                             input?
   86 00000044 6001            STR              R1, [R0]
   87 00000046 482F            LDR              R0, =GPIO_PORTF_DIR_R
   88 00000048 6801            LDR              R1, [R0]
   89 0000004A F001 01E0       AND              R1, #0xE0   ;make sure the chec
                                                            k this one out as w
                                                            ell
   90 0000004E 6001            STR              R1, [R0]
   91 00000050         ;times SPACE 1 --> R8
   92 00000050         ;ButtonPressed SPACE 1 --R9
   93 00000050         ;LOOPER SPACE 1   --> R10
   94 00000050 BF00            NOP
   95 00000052 F009 0900       AND              R9, #0
   96 00000056         ;LDR R4, ButtonPressed
   97 00000056         ;STR R5, [R4] ;the initial value of ButtonPressed is 0 
   98 00000056         ;LDR R4, LOOPER
   99 00000056 F04F 0A19       MOV              R10, #25
  100 0000005A         ;STR R5, [R4] ;put #25 into LOOPER
  101 0000005A         
  102 0000005A 482B    loop    LDR              R0, =GPIO_PORTE_DATA_R ; receiv
                                                            e the data given by
                                                             PORT E
  103 0000005C         ;R4 and R5 are dummy registers 
  104 0000005C         
  105 0000005C         
  106 0000005C 6801            LDR              R1, [R0]
  107 0000005E F001 0202       AND              R2, R1, #0x02 ;isolate bit for 
                                                            PE1 to see if the s
                                                            witch is pressed or
                                                             not based on posit
                                                            ive logic
  108 00000062 2A02            CMP              R2, #0x02
  109 00000064 D101            BNE              next
  110 00000066 F000 F82A       BL               BUTTONPRESSED
  111 0000006A         next
  112 0000006A         ;LDR R4, LOOPER
  113 0000006A 4656            MOV              R6, R10
  114 0000006C 464D            MOV              R5, R9
  115 0000006E         ;LDR R5, [R5]
  116 0000006E F04F 0719       MOV              R7, #25
  117 00000072 FB05 F507       MUL              R5, R5, R7  ;get the amount of 
                                                            machine cyles neede
                                                            d for the LED
  118 00000076 4435            ADD              R5, R6
  119 00000078 46A9            MOV              R9, R5      ;store back the nee
                                                            ded value back into
                                                             LOOPER
  120 0000007A         



ARM Macro Assembler    Page 4 


  121 0000007A         ;set the value of LOOPER based on the number of buttons 
                       pressed
  122 0000007A F041 0101       ORR              R1, #0x01   ;turn on LED
  123 0000007E 6001            STR              R1, [R0]
  124 00000080 4645            MOV              R5, R8
  125 00000082         ;LDR R5, [R5]
  126 00000082 4654            MOV              R4, R10     ; LDR R4, LOOPER
  127 00000084         ;LDR R4, [R4]
  128 00000084 46D0            MOV              R8, R10     ;STR R4, [R5] ;stor
                                                            e the value of LOOP
                                                            ER into times (I kn
                                                            ow, its a bit redud
                                                            ant but oh well)
  129 00000086         TurnOnLoop
  130 00000086 F000 F825       BL               TIMER       ;call the TIMER loo
                                                            p to kill time and 
                                                            machine cycles 
  131 0000008A 4645            MOV              R5, R8      ;LDR R5, times
  132 0000008C 462C            MOV              R4, R5      ;LDR R4, [R5]
  133 0000008E F1A4 0401       SUB              R4, #1
  134 00000092 46A0            MOV              R8, R4      ;STR R4, [R5]
  135 00000094 2C00            CMP              R4, #0x00
  136 00000096 D5F6            BPL              TurnOnLoop  ;branch back if pos
                                                            itve or zero
  137 00000098         
  138 00000098 F001 011E       AND              R1, #0x1E   ;turn off LED
  139 0000009C 6001            STR              R1, [R0]
  140 0000009E F04F 047D       MOV              R4, #125
  141 000000A2 4655            MOV              R5, R10     ;LDR R5, LOOPER
  142 000000A4         ;LDR R5, [R5]
  143 000000A4 EBA4 0405       SUB              R4, R5      ;125 - LOOPER
  144 000000A8         ;LDR R5, times
  145 000000A8 46A0            MOV              R8, R4      ;STR R4, [R5] --> s
                                                            tore 125- LOOPER in
                                                            to times (100 for n
                                                            o button pressed) w
                                                            e may have to calib
                                                            rate these values 
  146 000000AA         
  147 000000AA         TurnOffLoop
  148 000000AA F000 F813       BL               TIMER       ;call the timer loo
                                                            p to kill time and 
                                                            machine cycles
  149 000000AE 4645            MOV              R5, R8      ;LDR R5, times
  150 000000B0 462C            MOV              R4, R5      ;LDR R4, [R5]
  151 000000B2 F1A4 0401       SUB              R4, #1
  152 000000B6 46A0            MOV              R8, R4      ;STR R4, [R5]
  153 000000B8 2C00            CMP              R4, #0x00
  154 000000BA D5F6            BPL              TurnOffLoop ;branch back if pos
                                                            itive or zero
  155 000000BC         
  156 000000BC E7CD            B                loop
  157 000000BE         ;;;;;;;;;;;;;;;buttonpressed Method;;;
  158 000000BE         BUTTONPRESSED
  159 000000BE         
  160 000000BE F001 011E       AND              R1, #0x1E   ;turn off the LED
  161 000000C2 F04F 0401       MOV              R4, #1
  162 000000C6 464D            MOV              R5, R9      ;LDR R5, ButtonPres
                                                            sed



ARM Macro Assembler    Page 5 


  163 000000C8         ;LDR R5, [R5]
  164 000000C8 442C            ADD              R4, R5
  165 000000CA 46A1            MOV              R9, R4      ;STR R4, [R5] ; inc
                                                            rement the value of
                                                             ButtonPressed by 1
                                                            
  166 000000CC F001 011D       AND              R1, #0x1D   ;turn off the bit t
                                                            o the switch to avo
                                                            id redundancy
  167 000000D0 6001            STR              R1, [R0]
  168 000000D2 4770            BX               LR          ;return
  169 000000D4         
  170 000000D4         
  171 000000D4         
  172 000000D4         ;;;;;;;;;;;;;;TIMER LOOP;;;;;;;;;;;;
  173 000000D4         TIMER
  174 000000D4 F04F 0510       MOV              R5, #16
  175 000000D8         DLoop
  176 000000D8 F44F 747A       MOV              R4, #1000
  177 000000DC         DLoop1
  178 000000DC 3C01            SUBS             R4, #1
  179 000000DE D5FD            BPL              DLoop1
  180 000000E0 3D01            SUBS             R5, #1
  181 000000E2 D5F9            BPL              DLoop
  182 000000E4 4770            BX               LR          ;return
  183 000000E6         
  184 000000E6         
  185 000000E6         
  186 000000E6         
  187 000000E6 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  188 000000E8                 END                          ; end of file
              400FE608 
              40024420 
              40025420 
              4002451C 
              4002551C 
              40025510 
              40024400 
              40025400 
              400243FC 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\main.d
 -o.\main.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\In
c\Luminary --predefine="__EVAL SETA 1" --list=.\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 44 in file main.s
   Uses
      None
Comment: .text unused
BUTTONPRESSED 000000BE

Symbol: BUTTONPRESSED
   Definitions
      At line 158 in file main.s
   Uses
      At line 110 in file main.s
Comment: BUTTONPRESSED used once
DLoop 000000D8

Symbol: DLoop
   Definitions
      At line 175 in file main.s
   Uses
      At line 181 in file main.s
Comment: DLoop used once
DLoop1 000000DC

Symbol: DLoop1
   Definitions
      At line 177 in file main.s
   Uses
      At line 179 in file main.s
Comment: DLoop1 used once
Start 00000000

Symbol: Start
   Definitions
      At line 48 in file main.s
   Uses
      At line 46 in file main.s
Comment: Start used once
TIMER 000000D4

Symbol: TIMER
   Definitions
      At line 173 in file main.s
   Uses
      At line 130 in file main.s
      At line 148 in file main.s

TurnOffLoop 000000AA

Symbol: TurnOffLoop
   Definitions
      At line 147 in file main.s
   Uses
      At line 154 in file main.s
Comment: TurnOffLoop used once
TurnOnLoop 00000086




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: TurnOnLoop
   Definitions
      At line 129 in file main.s
   Uses
      At line 136 in file main.s
Comment: TurnOnLoop used once
loop 0000005A

Symbol: loop
   Definitions
      At line 102 in file main.s
   Uses
      At line 156 in file main.s
Comment: loop used once
next 0000006A

Symbol: next
   Definitions
      At line 111 in file main.s
   Uses
      At line 109 in file main.s
Comment: next used once
10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

GPIO_PORTE_AFSEL_R 40024420

Symbol: GPIO_PORTE_AFSEL_R
   Definitions
      At line 33 in file main.s
   Uses
      At line 64 in file main.s
Comment: GPIO_PORTE_AFSEL_R used once
GPIO_PORTE_DATA_R 400243FC

Symbol: GPIO_PORTE_DATA_R
   Definitions
      At line 31 in file main.s
   Uses
      At line 102 in file main.s
Comment: GPIO_PORTE_DATA_R used once
GPIO_PORTE_DEN_R 4002451C

Symbol: GPIO_PORTE_DEN_R
   Definitions
      At line 34 in file main.s
   Uses
      At line 70 in file main.s
Comment: GPIO_PORTE_DEN_R used once
GPIO_PORTE_DIR_R 40024400

Symbol: GPIO_PORTE_DIR_R
   Definitions
      At line 32 in file main.s
   Uses
      At line 83 in file main.s
Comment: GPIO_PORTE_DIR_R used once
GPIO_PORTF_AFSEL_R 40025420

Symbol: GPIO_PORTF_AFSEL_R
   Definitions
      At line 38 in file main.s
   Uses
      At line 67 in file main.s
Comment: GPIO_PORTF_AFSEL_R used once
GPIO_PORTF_DATA_R 400253FC

Symbol: GPIO_PORTF_DATA_R
   Definitions
      At line 36 in file main.s
   Uses
      None
Comment: GPIO_PORTF_DATA_R unused
GPIO_PORTF_DEN_R 4002551C

Symbol: GPIO_PORTF_DEN_R
   Definitions
      At line 40 in file main.s
   Uses
      At line 74 in file main.s
Comment: GPIO_PORTF_DEN_R used once
GPIO_PORTF_DIR_R 40025400

Symbol: GPIO_PORTF_DIR_R



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 37 in file main.s
   Uses
      At line 87 in file main.s
Comment: GPIO_PORTF_DIR_R used once
GPIO_PORTF_PUR_R 40025510

Symbol: GPIO_PORTF_PUR_R
   Definitions
      At line 39 in file main.s
   Uses
      At line 79 in file main.s
Comment: GPIO_PORTF_PUR_R used once
SYSCTL_RCGCGPIO_R 400FE608

Symbol: SYSCTL_RCGCGPIO_R
   Definitions
      At line 42 in file main.s
   Uses
      At line 56 in file main.s
Comment: SYSCTL_RCGCGPIO_R used once
10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

TExaS_Init 00000000

Symbol: TExaS_Init
   Definitions
      At line 43 in file main.s
   Uses
      At line 51 in file main.s
Comment: TExaS_Init used once
1 symbol
354 symbols in table
